#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SPI.h>
#include <ArduinoJson.h>

// resolution ecran oled ssd1306
#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT);

const unsigned int BUTTON_ALL = 3;          // pin bouton pour les 4 postes

const unsigned int BUTTON_POSTE_1 = 2;      // pin du bouton poste 1
const unsigned int LED_POSTE_1 = 10;        // pin de la led poste 1
bool poste_1_started = false;               // etat de l'exécution
bool poste_1_state = false;                 // etat de la led
unsigned int working_time_poste_1 = 8;      // temps de travail (en s)
unsigned int starting_time_poste_1 = 0;     // temps depuis le dernier changement d'état
unsigned int timer_poste_1 = 0;             // temps de travail écoulé ou temps de pause écoulé

const unsigned int BUTTON_POSTE_2 = 3;
const unsigned int LED_POSTE_2 = 11;
bool poste_2_started = false;
bool poste_2_state = false;
unsigned int working_time_poste_2 = 9;
unsigned int starting_time_poste_2 = 0;
unsigned int timer_poste_2 = 0;

const unsigned int BUTTON_POSTE_4 = 4;
const unsigned int LED_POSTE_4 = 12;
bool poste_4_started = false;
bool poste_4_state = false;
unsigned int working_time_poste_4 = 7; 
unsigned int starting_time_poste_4 = 0;
unsigned int timer_poste_4 = 0;

const unsigned int BUTTON_POSTE_6 = 5;
const unsigned int LED_POSTE_6 = 13;
bool poste_6_started = false;
bool poste_6_state = false;
unsigned int working_time_poste_6 = 10;
unsigned int starting_time_poste_6 = 0;
unsigned int timer_poste_6 = 0;

const unsigned int TIME_WAIT = 2;     // temps de repos (en s)

// logo cesi
const unsigned char cesi [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xcf, 0x9f, 0x9f, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x87, 0x07, 0x26, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x3e, 0x76, 0x7e, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x7e, 0x76, 0x3e, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x7e, 0x07, 0x06, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x7e, 0xff, 0xf6, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x36, 0x77, 0xf6, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x87, 0x06, 0x06, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  Serial.begin(9600);
  
  pinMode(BUTTON_POSTE_1, INPUT);
  pinMode(LED_POSTE_1, OUTPUT);
  digitalWrite(LED_POSTE_1, LOW);

  pinMode(BUTTON_POSTE_2, INPUT);
  pinMode(LED_POSTE_2, OUTPUT);
  digitalWrite(LED_POSTE_2, LOW);

  pinMode(BUTTON_POSTE_4, INPUT);
  pinMode(LED_POSTE_4, OUTPUT);
  digitalWrite(LED_POSTE_4, LOW);

  pinMode(BUTTON_POSTE_6, INPUT);
  pinMode(LED_POSTE_6, OUTPUT); 
  digitalWrite(LED_POSTE_6, LOW);

  pinMode(BUTTON_ALL, INPUT);

  // setup ecran et affichage logo cesi
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.drawBitmap(0, 0, cesi, 128, 64, WHITE);
  display.display();

  // changement de la taille du texte
  display.setTextSize(6);
}

// affiche des données sur le port serial en format json
void send_json(String color, String state, int poste){
  const size_t CAPACITY = JSON_ARRAY_SIZE(6);
  StaticJsonDocument<CAPACITY> doc;
  doc["poste"] = poste;
  doc["color"] = color;
  doc["state"] = state;
  serializeJson(doc, Serial);
  Serial.println("");
}

void action_poste_1(int counter){
  // si appui sur le bouton du poste ou sur le bouton global et qu'il n'est pas deja en train de travailler, debut du travail automatique
  if ((digitalRead(BUTTON_POSTE_1) | digitalRead(BUTTON_ALL)) && !poste_1_started){
    poste_1_started = true;                 // son travail a commencé
    starting_time_poste_1 = counter;        // temps auquel le poste a commencé à travailler
    timer_poste_1 = TIME_WAIT;              // pour qu'il commence directement a travailler, sans pause
  }
  // si il a commencé a travailler
  if (poste_1_started) {
    // si il ne vient pas juste de commencer
    if (!(starting_time_poste_1 == counter && timer_poste_1 == TIME_WAIT)) {
      // on obtient le temps écoulé depuis qu'il a commencé
      timer_poste_1 = (counter - starting_time_poste_1) / 10;
    }
    // si la led est eteinte
    if (!poste_1_state) {
      // si il a terminé sa pause
      if (timer_poste_1 >= TIME_WAIT) {
        // allume la led et envoie les donnees
        digitalWrite(LED_POSTE_1, HIGH);
        send_json("green", "on", 1);
        poste_1_state = true;
        // temps auquel le poste a commencé à travailler
        starting_time_poste_1 = counter;
      }
    } else {
      // sinon si la led est allumée et que son temps de travail est atteint
      if (timer_poste_1 >= working_time_poste_1) {
        // eteint la led et envoie les donnees
        digitalWrite(LED_POSTE_1, LOW);
        send_json("green", "off", 1);
        poste_1_state = false;
        // temps auquel le poste a commencé à faire sa pause
        starting_time_poste_1 = counter;
      }
    }
  }
}

void action_poste_2(int counter){
  if ((digitalRead(BUTTON_POSTE_2) | digitalRead(BUTTON_ALL)) && !poste_2_started){
    poste_2_started = true;
    starting_time_poste_2 = counter;
    timer_poste_2 = TIME_WAIT;
  }
  if (poste_2_started) {
    if (!(starting_time_poste_2 == counter && timer_poste_2 == TIME_WAIT)) {
      timer_poste_2 = (counter - starting_time_poste_2) / 10;
    }
    if (!poste_2_state) {
      if (timer_poste_2 >= TIME_WAIT) {
        digitalWrite(LED_POSTE_2, HIGH);
        send_json("green", "on", 2);
        poste_2_state = true;
        starting_time_poste_2 = counter;
      }
    } else {
      if (timer_poste_2 >= working_time_poste_2) {
        digitalWrite(LED_POSTE_2, LOW);
        send_json("green", "off", 2);
        poste_2_state = false;
        starting_time_poste_2 = counter;
      }
    }
  }
}

void action_poste_4(int counter){
  if ((digitalRead(BUTTON_POSTE_4) | digitalRead(BUTTON_ALL)) && !poste_4_started){
    poste_4_started = true;
    starting_time_poste_4 = counter;
    timer_poste_4 = TIME_WAIT;
  }
  if (poste_4_started) {
    if (!(starting_time_poste_4 == counter && timer_poste_4 == TIME_WAIT)) {
      timer_poste_4 = (counter - starting_time_poste_4) / 10;
    }
    if (!poste_4_state) {
      if (timer_poste_4 >= TIME_WAIT) {
        digitalWrite(LED_POSTE_4, HIGH);
        send_json("green", "on", 4);
        poste_4_state = true;
        starting_time_poste_4 = counter;
      }
    } else {
      if (timer_poste_4 >= working_time_poste_4) {
        digitalWrite(LED_POSTE_4, LOW);
        send_json("green", "off", 4);
        poste_4_state = false;
        starting_time_poste_4 = counter;
      }
    }
  }
}

void action_poste_6(int counter){
  if ((digitalRead(BUTTON_POSTE_6) | digitalRead(BUTTON_ALL)) && !poste_6_started){
    poste_6_started = true;
    starting_time_poste_6 = counter;
    timer_poste_6 = TIME_WAIT;
  }
  if (poste_6_started) {
    if (!(starting_time_poste_6 == counter && timer_poste_6 == TIME_WAIT)) {
      timer_poste_6 = (counter - starting_time_poste_6) / 10;
    }
    if (!poste_6_state) {
      if (timer_poste_6 >= TIME_WAIT) {
        digitalWrite(LED_POSTE_6, HIGH);
        send_json("green", "on", 6);
        poste_6_state = true;
        starting_time_poste_6 = counter;
      }
    } else {
      if (timer_poste_6 >= working_time_poste_6) {
        digitalWrite(LED_POSTE_6, LOW);
        send_json("green", "off", 6);
        poste_6_state = false;
        starting_time_poste_6 = counter;
      }
    }
  }
}

void display_stock_poste_4(){
  // affiche le nombre d'encours sur le poste 4

  //  /!\  probleme lors de la lecture des nombres envoyés par le pc, à refaire

  // read_counter pour lire les donnees qu'une fois par seconde
  if (read_counter > 10) {
    if (Serial.available() > 0) {
      int val = Serial.read();
      String str = "";
      str += val;
      display.clearDisplay();
      display.setCursor(47, 15);
      
      if (str != ""){
        if (str == "48") {
          display.print("0");
        } else
        if (str == "177") {
          display.print("1");
        } else
        if (str == "178") {
          display.print("2");
        } else
        if (str == "51") {
          display.print("3");
        } else
        if (str == "180") {
          display.print("4");
        } else
        if (str == "53") {
          display.print("5");
        } else
        if (str == "54") {
          display.print("6");
        } else
        if (str == "183") {
          display.print("7");
        } else
        if (str == "184") {
          display.print("8");
        } else
        if (str == "57") {
          display.print("9");
        } else {
          display.print("Erreur");
        }
        display.display();
      }
      read_counter = 0;
    }
  }
}

unsigned int counter = 0;
unsigned int read_counter = 0;

void loop() {
  counter++;
  action_poste_1(counter);
  action_poste_2(counter);
  action_poste_4(counter);
  action_poste_6(counter);
  delay(100);

  /*
  if ((poste_1_started | poste_2_started | poste_4_started | poste_6_started)){
    display_stock_poste_4();
    read_counter++;
  }
  */

}
